{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class StudentService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = \"https://jsonplaceholder.typicode.com/users\";\n  }\n  //Metoda odpowiedzialana za pobieranie studenta o okreslonym id z aplikacji backend\n  getStudentByID(studentid) {\n    let studentUrl = this.url + \"/\" + studentid;\n    return this.httpClient.get(studentUrl);\n  }\n  //metoda odpowiedzialna za pobieranie studentow z aplikacji backendowej\n  getStudents() {\n    return this.httpClient.get(this.url);\n  }\n  //metoday odpowiedzialna za wysylanie zadania DELETE i usiniecie zasobu o okreslonym id\n  deleteStudent(studentId) {\n    //address_url\n    let studentUrl = this.url + \"/\" + studentId;\n    return this.httpClient.delete(studentUrl);\n  }\n  //metoda odpowiedzialna za wysylanie zadania POST\n  addStudent(student) {\n    return this.httpClient.post(this.url, student);\n  }\n}\n_class = StudentService;\n_class.ɵfac = function StudentService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["StudentService","constructor","httpClient","url","getStudentByID","studentid","studentUrl","get","getStudents","deleteStudent","studentId","delete","addStudent","student","post","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/nikola/student-manager-angular/Student-Manager-Angular/src/app/student.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Student } from './students';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentService {\n\n  private url = \"https://jsonplaceholder.typicode.com/users\";\n\n\n  constructor(private httpClient: HttpClient) { }\n\n  //Metoda odpowiedzialana za pobieranie studenta o okreslonym id z aplikacji backend\ngetStudentByID(studentid: number){\n  let studentUrl = this.url + \"/\" + studentid;\n  return this.httpClient.get<Student>(studentUrl);\n}\n\n  //metoda odpowiedzialna za pobieranie studentow z aplikacji backendowej\n  getStudents() {\n    return this.httpClient.get<Student[]>(this.url);\n  }\n\n  //metoday odpowiedzialna za wysylanie zadania DELETE i usiniecie zasobu o okreslonym id\n  deleteStudent(studentId: number) {\n    //address_url\n    let studentUrl = this.url + \"/\" + studentId;\n    return this.httpClient.delete<Student>(studentUrl);\n  }\n\n  //metoda odpowiedzialna za wysylanie zadania POST\n  addStudent(student: Student) {\n    return this.httpClient.post<Student>(this.url, student);\n  }\n\n}\n"],"mappings":";;;AAOA,OAAM,MAAOA,cAAc;EAKzBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAHtB,KAAAC,GAAG,GAAG,4CAA4C;EAGZ;EAE9C;EACFC,cAAcA,CAACC,SAAiB;IAC9B,IAAIC,UAAU,GAAG,IAAI,CAACH,GAAG,GAAG,GAAG,GAAGE,SAAS;IAC3C,OAAO,IAAI,CAACH,UAAU,CAACK,GAAG,CAAUD,UAAU,CAAC;EACjD;EAEE;EACAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACN,UAAU,CAACK,GAAG,CAAY,IAAI,CAACJ,GAAG,CAAC;EACjD;EAEA;EACAM,aAAaA,CAACC,SAAiB;IAC7B;IACA,IAAIJ,UAAU,GAAG,IAAI,CAACH,GAAG,GAAG,GAAG,GAAGO,SAAS;IAC3C,OAAO,IAAI,CAACR,UAAU,CAACS,MAAM,CAAUL,UAAU,CAAC;EACpD;EAEA;EACAM,UAAUA,CAACC,OAAgB;IACzB,OAAO,IAAI,CAACX,UAAU,CAACY,IAAI,CAAU,IAAI,CAACX,GAAG,EAAEU,OAAO,CAAC;EACzD;;SA5BWb,cAAc;;mBAAdA,MAAc,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAdlB,MAAc;EAAAmB,OAAA,EAAdnB,MAAc,CAAAoB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}